# def calk1(a, b):
#     return a + b
#calk1 = lambda a,b: a + b

# def calk2(a, b):
#     return a * b

# def math(op, x, y):
#     print(op(x, y))

# math(lambda a,b: a + b, 5, 45)

# //////////////////////////////////////////////////////////////////////////////////////////

"""1. В списке хранятся числа. Нужно выбрать только чётные числа и составить список пар
(число; квадрат числа).
Пример: 1 2 3 5 8 15 23 38
Получить: [(2, 4), (8, 64), (38, 1444)]"""

# data = [1, 2, 3, 5, 8, 15, 23, 38]
# res = list()
# for i in data:
#     if i % 2 == 0:
#         res.append((i, i ** 2))

# print(res)

# def select(f, col):
#     return [f(x) for x in col]

# def where(f, col):
#     return [x for x in col if f(x)]

# data = [1, 2, 3, 5, 8, 15, 23, 38]
# res = select(int, data)
# print(res)
# res = where(lambda x: x % 2 == 0, res)
# print(res)
# res = list(select(lambda x: (x, x ** 2), res))
# print(res)

# def where(f, col):
#     return [x for x in col if f(x)]

# data = [1, 2, 3, 5, 8, 15, 23, 38]
# res = map(int, data)
# print(res)
# res = where(lambda x: x % 2 == 0, res)
# print(res)
# res = list(map(lambda x: (x, x ** 2), res))
# print(res)

# list_1 = [x for x in range(1, 20)]
# print(list_1)

# list_1 = list(map(lambda x: x + 10, list_1))
# print(list_1)

# //////////////////////////////////////////////////////////////////////////////////////////

"""Задача: C клавиатуры вводится некий набор чисел, в качестве разделителя используется
пробел. Этот набор чисел будет считан в качестве строки. Как превратить list строк в list чисел?"""

# data = '15 156 96 3 5 8 52 5'
# print(data)

# data = data.split() # преобразование строки в список значений
# print(data)

# data = list(map(int, data.split())) # преобразование строки в список чисел
# print(data)

# //////////////////////////////////////////////////////////////////////////////////////

# data = [15, 65, 9, 36, 175]
# res = list(filter(lambda x: x % 10 == 5, data))
# print(res)

# /////////////////////////////////////////////////////////////////////////////////////

# data = [1, 2, 3, 5, 8, 15, 23, 38]
# res = map(int, data)
# res = filter(lambda x: x % 2 == 0, res)
# res = list(map(lambda x: (x, x ** 2), res))
# print(res)
 
## /////////////////////////////////////////////////////////////////////////////////////

""" Функция zip
Функция zip() применяется к набору итерируемых объектов и возвращает итератор с кортежами
из элементов входных данных
На выходе получаем набор данных, состоящий из элементов соответствующих
исходному набору.
Функция zip
Пример:
users = ['user1', 'user2', 'user3', 'user4', 'user5']
ids = [4, 5, 9, 14, 7]
data = list(zip(users, ids))
print(data) # [('user1', 4), ('user2', 5), ('user3', 9), ('user4', 14), ('user5', 7)]
Функция zip () пробегает по минимальному входящему набору:
users = ['user1', 'user2', 'user3', 'user4', 'user5']
ids = [4, 5, 9, 14, 7]
salary = [111, 222, 333]
data = list(zip(users, ids, salary))
print(data) # [('user1', 4, 111), ('user2', 5, 222), ('user3', 333)]

Функция enumerate
Функция enumerate() применяется к итерируемому объекту и возвращает новый итератор с
кортежами из индекса и элементов входных данных.
Функция enumerate() позволяет пронумеровать набор данных.
users = ['user1', 'user2', 'user3']
data = list(enumerate(users)
print(data) # [(0, 'user1'), (1, 'user2'), (2, 'user3))]"""

## /////////////////////////////////////////////////////////////////////////////////////

""" Файлы """

# colors = ['red', '8898', 'blue']
# data = open('file.txt', 'a', encoding='utf-8') # здесь указываем режим, в котором будем работать
# data.writelines(colors) # разделителей не будет
# data.close()

# with open('file.txt', 'w') as data:
#     data.write('line 1\n')
#     data.write('line 2\n')
 
# path = 'file.txt'
# data = open('file.txt', 'r')
# for line in data:
#     print(line)
# data.close()

## /////////////////////////////////////////////////////////////////////////////////////

""" Модули ОС 

Модуль os
Модуль os предоставляет множество функций для работы с операционной системой, причем их
поведение, как правило, не зависит от ОС, поэтому программы остаются переносимыми.
Для того, чтобы начать работать с данным модулем необходимо его импортировать в свою
программу:
import os
Познакомимся с базовыми функциями данного модуля:
● os.chdir(path) - смена текущей директории.
import os
os.chdir('C:/Users/79190/PycharmProjects/GB')
● os.getcwd() - текущая рабочая директория
import os
print(os.getcwd()) # 'C:\Users\79190\PycharmProjects\webproject'

Модуль os
● os.path - является вложенным модулем в модуль os и реализует некоторые полезные функции для работы с
путями, такие как:
○ os.path.basename(path) - базовое имя пути
import os
print(os.path.basename('C:/Users/79190/PycharmProjects/webproject/main.py')) #'main.py'
● os.path.abspath(path) - возвращает нормализованный абсолютный путь.
import os
print(os.path.abspath('main.py')) # 'C:/Users/79190/PycharmProjects/webproject/main.py'
Это лишь малая часть возможностей модуля os."""

## /////////////////////////////////////////////////////////////////////////////////////

"""Модуль shutil
Модуль shutil содержит набор функций высокого уровня для обработки файлов, групп файлов, и папок. В частности,
доступные здесь функции позволяют копировать, перемещать и удалять файлы и папки. Часто используется вместе
с модулем os.
Для того, чтобы начать работать с данным модулем необходимо его импортировать в свою программу:
import shutil
Познакомимся с базовыми функциями данного модуля:
● shutil.copyfile(src, dst) - копирует содержимое (но не метаданные) файла src в файл dst.
● shutil.copy(src, dst) - копирует содержимое файла src в файл или папку dst.
● shutil.rmtree(path) - Удаляет текущую директорию и все поддиректории; path должен указывать на
директорию, а не на символическую ссылку."""
